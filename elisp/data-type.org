#+TITLE: 数据类型
#+AUTHOR: DarkSun, rgb-24bit

* Table of Contents                                       :TOC_4_gh:noexport:
- [[#number][Number]]
  - [[#integer][Integer]]
  - [[#float][Float]]
- [[#sequence][Sequence]]
  - [[#array][Array]]
    - [[#vector][vector]]
    - [[#bool-vector][bool-vector]]
    - [[#char-tables][char-tables]]
    - [[#string][string]]
  - [[#list][List]]
    - [[#association-list--alist][association list / alist]]
    - [[#property-list--plist][Property list / plist]]
- [[#hashtable][hashtable]]
- [[#symbol][symbol]]
  - [[#符号的组成][符号的组成]]
  - [[#符号的形成][符号的形成]]
  - [[#符号的引用][符号的引用]]
- [[#char][Char]]
  - [[#control-characters][Control characters]]
  - [[#meta-character][Meta Character]]
  - [[#shift-character][Shift Character]]
  - [[#alt-character][Alt Character]]
  - [[#hyper-character][Hyper Character]]
  - [[#super-character][Super Character]]
- [[#其他类型][其他类型]]
- [[#循环结构][循环结构]]
- [[#数据类型之间的转换][数据类型之间的转换]]
- [[#类型判断][类型判断]]

* Number
** Integer
   ~Integer~ 的取值范围由变量 ~most-positive-fixnum~ 和 ~most-negative-fixnum~ 指定， 任何超过
   ~Integer~ 范围的值都认为是 ~Float~ 型。

   ~Integer~ 默认用 ~10~ 进制数表示， 但也可以用：
   + ~#bNNNN~ 表示二进制数
   + ~#oNNNN~ 表示八进制数
   + ~#xNNNN~ 表示十六进制数
   + ~#MrNNNN~ 表示 ~M~ 进制的数

** Float
   ~Elisp~ 中 ~Float~ 的取值范围与 ~C~ 中的 ~double~ 型一样。

   ~Float~ 使用 ~INF~ 表示无穷大， 使用 ~NaN~ 表示非数。
   #+BEGIN_SRC elisp
     (/ 0 0.0)    ; -0.0e+NaN
     (/ -0 0.)    ; -0.0e+NaN
     (/ 1 0.0)    ; 1.0e+INF
     (/ -1 0.0)   ; -1.0e+INF
   #+END_SRC

   *相关函数*:
   #+BEGIN_SRC elisp
     ;; 判断是否为 NAN
     (isnan X)

     ;; 返回一个元组 (S .E), 使得 S * 2^E = X, S 的值在 [0.5, 1) 之间
     (frexp X)

     ;; 返回 Float 值 X, 使得 X = S * 2^E
     (ldexp S E)

     ;; 假设 X1 = S1 * 2^E1, X2 = S2 * 2^E2, 则返回 S1 * 2^E2 的值
     (copysign X1 X2)

     ;; 返回 log2(x) 的值， 向下取整
     (logb X)
   #+END_SRC

* Sequence
  通过函数 ~length~ 可以获取序列的长度：
  #+BEGIN_SRC elisp
    (length SEQUENCE)
  #+END_SRC

  需要注意的是 ~length~ 不能对点列表和环形列表求长度， 但可以使用 ~safe-length~ 代替：
  #+BEGIN_SRC elisp
    (safe-length LIST)
  #+END_SRC

** Array
   除了 ~char-table~ 之外， 创建其他类型的 ~Array~ 都需要指定一个固定长度。

   ~char-table~ 的长度是由 ~character code~ 的范围所确定的， 不能人工指定。

*** vector
   ~vector~ 是 ~sequence~ 的一个子类型。

   + 创建 ~vector~ 的两种方式：
     #+BEGIN_SRC elisp
       ;; 使用字面量语法 [val1 val2 val3 ...]
       [1 2 3 4 "23"]

       ;; 使用函数 (vector &rest OBJECTS)
       (vector 1 2 3 4 "23")
     #+END_SRC

   + 获取 ~vector~ 的长度：
     #+BEGIN_SRC elisp
       (length vector-obj)
     #+END_SRC

   + 获取设置 ~element~:
     #+BEGIN_SRC elisp
       ;; 通过 index 获取 element
       (elt SEQUENCE N)

       ;; 通过 index 设置 element
       (aset ARRAY INDEX NEWELT)
     #+END_SRC

   + 将多个 ~sequence~ 组合成一个 ~vector~:
     #+BEGIN_SRC elisp
       (vconcat seq1 seq2 ...)
     #+END_SRC

   + 将 ~vector~ 转换成 ~list~
     #+BEGIN_SRC elisp
       (append vector-obj nil)
     #+END_SRC
  
*** bool-vector
    ~bool-vector~ 只能存放 ~nil~ 或 ~t~, 使用函数 ~make-bool-vector~ 创建：
    #+BEGIN_SRC elisp
      (make-bool-vector LENGTH INIT)
    #+END_SRC

    ~make-bool-vector~ 会使用 ~INIT~ 来初始化每一个 ~element~, 如：
    #+BEGIN_SRC elisp
      (make-bool-vector 6 t)
    #+END_SRC

    上述代码的输出为：
    #+BEGIN_EXAMPLE
      #&6"?"
    #+END_EXAMPLE
    
    其中， ~#&6~ 标识了 ~bool-vector~ 的 *长度*, 而 ~(make-bool-vector 6 t)~ 的代表的是类似
    #+BEGIN_SRC elisp
      [t t t t t t]
    #+END_SRC

    的 ~vector~.

    按照 ~t => 1, nil => 0~ 的方式翻译这个 ~vector~ 可以得到二进制串 ~111111~, 对应 ~ASCII~ 字符 ~?~.

*** char-tables
    + ~char-tables~ 类似 ~vector~, 但它使用 ~Character~ 作为索引
    + ~char-tables~ 的输出格式和 ~vector~ 类似， 但前面加上 ~#^~ 作为标识
    + 每个 ~char-table~ 对象都有一个 ~symbol~ 类型的 ~subtype~, 可以用于标识 ~char-table~ 的用处, 使用函数 ~char-table-subtyple~ 来查询该 ~subtype~
    + ~char-table~ 的 ~subtype~ 中的属性 ~char-table-extra-slots~ 决定了该 ~char-table~ 的扩展 ~slot~ 的个数(0-10之间)
    + 每个 ~char-table~ 都可以有一个父 ~char-table~, 子 ~char-table~ 从父 ~char-table~ 中继承索引的值.
    + ~char-table~ 还能够设定一个默认值. 若发现 ~char-table~ 指定 ~index~ 的值为 ~nil~, 则返回该默认值.

*** string
    + ~elisp~ 中 ~string~ 是不可变的
    + ~string~ 不能包含 ~?\H-N ?\A-N ?\s-N~ 这些字符
    + ~string~ 可以包含文本属性， 包含文本属性的输出格式为：
      #+BEGIN_SRC elisp
        #("characters" property-data...)
      #+END_SRC
    + ~elisp~ 中， 对字符串比较的函数只有 ~string=~ 和 ~string<~, 没有 ~string>~

** List
   ~list~ 是 ~sequence~ 的一个子类型， 相关的操作：
   #+BEGIN_SRC elisp
     ;; 使用字面表单式创建 list '(v1 v2 v3 ...)
     '(1 2 3)

     ;; 使用 list 函数创建 list (list v1 v2 v3)
     (list 1 2 3)

     ;; 获取 element
     (car (list 1 2 3))  ; => 1, 第一个元素
     (nth 2 (list 1 2 3))  ; => 3, 第 n 个元素
     (car (last (list 1 2 3)))  ; => 3, 最后一个元素
     (cdr (list 1 2 3))  ; => (2, 3), 第二个到最后一个元素
     (nthcdr 2 (list 1 2 3))  ; => (3), 第 n 个到最后一个元素
     (butlast (list 1 2 3) 2)  ; => (1), 除最后 n 个元素

     ;; 获取 list 的长度
     (length list-obj)

     ;; 在 list 开头添加 element
     (cons element list-obj)

     ;; 合并两个 list
     (append list1 list2)

     ;; 在 list 尾部添加 element
     (append list-obj (list element))

     ;; 修改 list
     (pop PLACE)  ; 移除并返回第一个元素
     (nbutlast LIST &optional N)  ; 移除最后 N 个元素
     (setcar LIST x)  ; 替换第一个元素为指定 x
     (setcdr LIST x)  ; 替换第二个到最后一个元素为 x
   #+END_SRC

*** association list / alist
    ~alist~ 记录了 ~key~ 到 ~value~ 的关联， 每一个 ~cell~ 的 ~car~ 部分为 ~key~, 而 ~cdr~ 部分为 ~value~.

    比如一下 ~alist~, ~key~ 分别为 ~a~ 和 ~b~, 而 ~value~ 为 ~1~ 和 ~(2 3)~:
    #+BEGIN_SRC elisp
      ((a . 1) ("b" 2 3))
    #+END_SRC

    通常的结构为：
    #+BEGIN_SRC elisp
      '((key value) (key value) ...)
    #+END_SRC

    + [[https://www.gnu.org/software/emacs/manual/html_node/elisp/Association-Lists.html][官方文档]]

*** Property list / plist
    ~plist~ 的作用类似 ~alist~, 也是用 ~list~ 表示一组键值对。

    ~plist~ 的 ~key~ 为 ~symbol~, 结构为：
    #+BEGIN_SRC elisp
      ;; 键值对的对应关系为 key1 -> value1; key2 -> '(value2); key3 -> "value3"
      (key1 value1 key2 (value2) key3 "value3")
    #+END_SRC

    每一个 ~symbol~ 都可以 ~attach~ 一个 ~plist~.

	  需要注意的是, ~plist~ 中的 *key必须是唯一的*, 相比来说 ~alist~ 就没有这个限制了.

    + [[https://www.gnu.org/software/emacs/manual/html_node/elisp/Property-Lists.html#Property-Lists][官方文档]]

* hashtable
  ~hash table~ 类似 ~alist~ 一样提供了键值配对的功能。 但比起 ~alist~ 来说, 有如下三个方面的不同：
  + 在搜索大量的键值对集合时, 使用 ~hash table~ 的搜索速度比 ~alist~ 快得多
  + ~hash table~ 中的的 ~item~ 是非排序的， 不能有重复键值
  + 两个 ~hash table~ 对象无法共享同一个结构体, 而两个 ~alist~ 对象之间有可能使用共同的 ~tail~

  ~hash table~ 的输出格式以 ~#s~ 开头后接 ~hash table~ 的属性和内容
  #+BEGIN_EXAMPLE
    #s(hash-table size 65 test eql rehash-size 1.5 rehash-threshold 0.8 data
                  ())
  #+END_EXAMPLE
   
  + [[https://www.gnu.org/software/emacs/manual/html_node/elisp/Hash-Tables.html#Hash-Tables][官方文档]]

* symbol
  在 ~elisp~ 中 ~symbol~ 的概念和其他语言中的 *变量* 类似， 但是在 ~elisp~ 中， 一个符号除了 *值* 以外， 还可以有函数。

  即： 一个 ~symbol~ 可以同时求值和当做函数使用

  如果列表的第一个表达式如果是一个符号， 解释器会查找这个表达式的函数值。 如果函数值是另一个符号， 则会继续查找这个符号的函数值。

  任何字符都可以使用 ~\~ 转义后用在 ~symbol~ 的定义中， 但是和字符串里字符表示不同， ~\~ 转义后只是表示其后的字符， 比如 ~\t~ 代表的字符 ~t~, 而不是制表符。

  如果要在符号名里使用制表符， 必须在 ~\~ 后加上制表符本身。
  #+BEGIN_SRC elisp
    (setq \  10)       ; \空格
    (message "%d" \ )  ;"10"
  #+END_SRC
  
  *PS:* ~elisp~ 中可以用来定义 ~symbol~ 的字符范围真的是很宽广， 基本上各种字符都可以， 包括 =~_!@$%^&amp;:<>{}?= 等字符。

** 符号的组成
   + 符号的名称 ::
     + 函数 ~symbol-name~ 可以用于获取一个符号的名称

   + 符号的值 ::
     + 函数 ~symbol-value~ 可以用于获取一个符号的值
     + 函数 ~boundp~ 可以用于测试符号是否有值
     + 以 ~:~ 开头的符号的值不能修改
 
   + 符号的函数 ::
     + 函数 ~symbol-function~ 可以用于获取一个符号的函数
     + 函数 ~fboundp~ 可以用于测试符号是否设置了函数
     + 符号的 ~function slot~ 除了存放 ~function~ 外， 还可以存放 ~macro~, ~symbol~, ~keyboard~ ~marcro~, ~keymap~, ~autoload object~
 
   + 符号的属性列表 ::
     + 函数 ~symbol-plist~ 可以用于获取一个符号的属性列表
     + 可以使用 ~get/put~ 来 *访问/修改* 某个属性值
     + 可以使用 ~plist-get/plist-put~ 来 *访问/设置* 属性列表中的属性
     + 属性列表是一个形如 ~(prop1 value1 prop2 value2)~ 的关联列表， 但无法删除一个属性
     + 可以使用属性列表来存储 ~function~ 的状态

** 符号的形成
   当 ~elisp~ 读取到一个 ~symbol~ 时， 它会先在一个名为 ~obarray~ 的 ~vector~ 中检查是否已经存在这个 ~symbol~, 若不存在， 
   则 ~elisp reader~ 创建新的 ~symbol~ 并添加到 ~obarray~ 中 (创建并添加 ~symbol~ 的过程被成为 ~interning~, 而该 ~symbol~ 被称为是 ~interned symbol~).

   如果想避免 ~intern~ 一个 ~symbol~, 可以在符号名前加上 ~#:~, 这些符号被称为 ~uninterned symbols~.
   #+BEGIN_SRC elisp
     (intern-soft "abc") ; => nil
     'abc ; => abc
     (intern-soft "abc") ; => abc
     (intern-soft "abcd") ; => nil
     '#:abcd ; => abcd
     (intern-soft "abcd") ; => nil
   #+END_SRC
	
   ~obarray~ 也是一种类型名称。

   由于在 ~elisp~ 中, ~obarray~ 就是一个 ~vector~, 因此可以使用 ~(make-vecotr LENGTH 0)~ 来创建一个空的 ~obarray~,
   而要把 ~symbol~ 插入一个 ~obarray~, 则必须使用如下的 ~intern~ 系列函数来进行。

   #+BEGIN_SRC elisp
     (intern STRING &optional OBARRAY)
     (intern-soft NAME &optional OBARRAY)
     (unintern NAME OBARRAY)
     (mapatoms FUNCTION &optional OBARRAY)
   #+END_SRC

** 符号的引用
   默认情况下， ~elisp~ 会对一个符号进行求值操作， 如果要引用符号本身， 可以使用函数 ~quote~:
   #+BEGIN_SRC elisp
     (quote ARG)
   #+END_SRC
   
   以下两种书写方式是等价的：
   #+BEGIN_SRC elisp
     (quote x)
     'x
   #+END_SRC
   
   使用例：
   #+BEGIN_SRC elisp
     (setq foo (make-vector 10 0))  ; => [0 0 0 0 0 0 0 0 0 0]
     (symbolp foo)  ; => nil
     (symbolp (quote foo))  ; => t
     (symbolp 'foo)  ; => t
   #+END_SRC

* Char
  类似 ~C~, ~Elisp~ 中的 ~Char~ 其实就是 ~integer~ (值从 0 到 (max-char) 的范围都可以认为是 character). ~Char~ 类型的 *字面量结构* 为 ~?字母~, 例如：
  #+BEGIN_SRC elisp
    (message "%d" ?A)      ; 65
    (message "%d" ?\.)     ; 46 标点一般在前面加 \
    (message "%d" ?我)     ; 25105

    ?\a  ;=> 7                 ; control-g, `C-g'
    ?\b  ;=> 8                 ; backspace, <BS>, `C-h'
    ?\t  ;=> 9                 ; tab, <TAB>, `C-i'
    ?\n  ;=> 10                ; newline, `C-j'
    ?\v  ;=> 11                ; vertical tab, `C-k'
    ?\f  ;=> 12                ; formfeed character, `C-l'
    ?\r  ;=> 13                ; carriage return, <RET>, `C-m'
    ?\e  ;=> 27                ; escape character, <ESC>, `C-['
    ?\s  ;=> 32                ; space character, <SPC>
    ?\\  ;=> 92                ; backslash character, `\'
    ?\d  ;=> 127               ; delete character, <DEL>
    ?\uNNNN                    ; 这里 N 为 16 进制数, 表示 U+NNNN 的 Unicode 字符
    ?\U00NNNNNN                ;

    ?\x十六进制代码            ; ?\x41 = \?A
    ?\三个八进制代码           ; ?\001 = `C-a`
  #+END_SRC

  + 没有 ~charp~, 因为字符就是整数, 但是有 ~char-or-string-p~ 函数
  + 使用 ~char-equal~ 比较字符时, 需要注意 ~case-fold-search~ 变量的值, ~t~ 表示忽略大小写

** Control characters
   ~Ctrl-N~ 的字面表达式为 ~?\^字母~ (这里的字母不区分大小写)
   #+BEGIN_SRC emacs-lisp
     ?\^I  ; == ?\^i  == C-i == 9
   #+END_SRC

   还可以表示为 ~?\C-字母~
   #+BEGIN_SRC emacs-lisp
     ?\C-g  ;== ?\^g == C-g
   #+END_SRC

   需要注意的是, ~?\C-G~ 不是 ~?\C-S-g~ 的意思, 它跟 ~?\C-g~ 的意义一样

   由于历史的原因, ~Emacs~ 把 ~<DEL>~ 看成是 ~C-?~

** Meta Character
   ~M-N~ 的字面表示方式为 ~?\M-字母~

** Shift Character
   ~S-N~ 的字面表示方式为 ~?\S-N~

** Alt Character
   ~A-N~ 的字面表示方式为 ~?\A-N~

** Hyper Character
   ~H-N~ 的字面表示方式为 ~?\H-N~

** Super Character
   ~s-N~ 的字面表示方式为 ~?\s-N~

* 其他类型
  + Buffer
  + Marker
  + Window
  + Frame
  + Terminal
  + Window Configuration
  + Frame Configuration
  + Process
  + Stream
    + nil 指 ~standard-input~ 和 ~standard-output~
    + t 指代从 ~minibuffer~ 输入或输出到 ~echo area~
  + Keymap
  + Overlay
    + Overlay 用来给 buffer 的一部分内容加上不同的显示风格
  + Font

* 循环结构
  使用 ~#N=~ 来定义循环点， 使用 ~#N#~ 来引用循环点， ~N~ 为数字：
  #+BEGIN_SRC elisp
    '(#1=(a) b #1#)
    #1='(a #1#)
  #+END_SRC

* 数据类型之间的转换
  数据类型转换：
  #+BEGIN_SRC elisp
    ;; 数字和字符串之间的转换
    (number-to-string 10)    ; => "10"
    (string-to-number "10")  ; => 10
    (format "%d" 10)         ; => 10

    ;; 序列转换为字符串
    (concat '(?a ?b ?c ?d ?e))  ; => "abcde"
    (concat [?a ?b ?c ?d ?e])   ; => "abcde"

    ;; 字符串转换为向量
    (vconcat "abcde")  ; => [97 98 99 100 101]

    ;; 字符串转列表
    (append "abcde" nil)  ; => (97 98 99 100 101)

    ;; byte => string
    (byte-to-string BYTE)

    ;; 对象转换为字符串
    (format "%s" object)
    (prin1-to-string object)

    ;; 字符串转换为对象
    (read-from-string string)

    ;; 符号转换为字符串
    (symbol-name symbol)

    ;; 字符串转换为符号
    (intern string)
  #+END_SRC

  大小写转换：
  #+BEGIN_SRC elisp
    (downcase string-or-char)         ; 转换为小写
    (upcase string-or-char)           ; 转换为大写
    (capitalize string-or-char)       ; 单词首字母大写
    (upcase-initials string-or-char)  ; 单词首字母大写
  #+END_SRC

  *PS:* ~elisp~ 通过 ~case table~ 来确定大小写的对应关系， 每个 ~buffer~ 都可以设置自己的 ~case table~.

  数值类型转换：
  #+BEGIN_SRC elisp
    (float number)     ; 转换数字为 Float 型
    (truncate number)  ; 截断小数位
    (floor number)     ; 向下取整
    (ceiling number)   ; 向上取整
    (round number)     ; 向偶数舍入
  #+END_SRC

* 类型判断
  #+BEGIN_SRC elisp
    (cl-typep object type)  ; 检查 object 是否为 type 类型
    (type-of object)  ; 返回 object 的基本类型
  #+END_SRC

